{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.613.9944",
      "templateHash": "10040438303648630727"
    }
  },
  "parameters": {
    "applicationGatewayName": {
      "type": "string",
      "defaultValue": "[guid(resourceGroup().id)]"
    },
    "vnetName": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetName": {
      "type": "string",
      "defaultValue": ""
    },
    "skuName": {
      "type": "string",
      "defaultValue": "WAF_v2",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large",
        "Standard_v2",
        "WAF_Large",
        "WAF_Medium",
        "WAF_v2"
      ]
    },
    "minCapacity": {
      "type": "int",
      "defaultValue": 2
    },
    "frontendPort": {
      "type": "int",
      "defaultValue": 443
    },
    "frontendProtocol": {
      "type": "string",
      "defaultValue": "Https",
      "allowedValues": [
        "Https"
      ]
    },
    "backendPort": {
      "type": "int",
      "defaultValue": 443
    },
    "backendProtocol": {
      "type": "string",
      "defaultValue": "Https",
      "allowedValues": [
        "Http",
        "Https"
      ]
    },
    "healthProbeHostName": {
      "type": "string",
      "defaultValue": "test.domain.com"
    },
    "healthProbePath": {
      "type": "string",
      "defaultValue": "/"
    },
    "backendIpAddress": {
      "type": "string",
      "defaultValue": ""
    },
    "cookieBasedAffinity": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ]
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "httpsListenerNames": {
      "type": "array",
      "defaultValue": []
    },
    "listenerHostName": {
      "type": "string",
      "defaultValue": ".domain.com"
    },
    "backendPoolHostName": {
      "type": "string",
      "defaultValue": ".internal.testdomain.com"
    },
    "rootCertData": {
      "type": "secureString",
      "defaultValue": ""
    },
    "certData": {
      "type": "secureString",
      "defaultValue": ""
    },
    "certPassword": {
      "type": "secureString",
      "defaultValue": ""
    }
  },
  "functions": [],
  "variables": {
    "appGwId": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
    "appGwIPConfigName": "[format('{0}-ipc', parameters('applicationGatewayName'))]",
    "appGwPublicIpName_var": "[format('{0}-pip', parameters('applicationGatewayName'))]",
    "appGwFrontendIPConfigName": "[format('{0}-fre-ipc', parameters('applicationGatewayName'))]",
    "appGwFrontendPortName": "[format('{0}-fre-port', parameters('applicationGatewayName'))]",
    "appGwBackendPoolName": "[format('{0}-bkend-pool', parameters('applicationGatewayName'))]",
    "appGwHttpsListenerName": "[format('{0}-https-listener', parameters('applicationGatewayName'))]",
    "appGwHttpsListenerHostName": "[parameters('listenerHostName')]",
    "appGwSSLCertName": "[format('{0}-ssl-cert', parameters('applicationGatewayName'))]",
    "appGwSSLCertId": {
      "Id": "[format('{0}/sslCertificates/{1}', variables('appGwId'), variables('appGwSSLCertName'))]"
    },
    "appGwBackendHttpSettingsName": "[format('{0}-bkend-http-settings', parameters('applicationGatewayName'))]",
    "appGwBackendHttpSettingsHostName": "[parameters('backendPoolHostName')]",
    "appGwHttpsRuleName": "[format('{0}-rule', parameters('applicationGatewayName'))]",
    "appGwProbeName": "[format('{0}-health-probe', parameters('applicationGatewayName'))]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
    "appGwPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGwPublicIpName_var'))]",
    "appGwProbeRef": "[format('{0}/probes/{1}', variables('appGwId'), variables('appGwProbeName'))]",
    "appGwSize": "[parameters('skuName')]",
    "appGwTier": "[parameters('skuName')]",
    "appGwTrustedRootCertName": "[format('{0}-root-cert', parameters('applicationGatewayName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('appGwPublicIpName_var')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2020-05-01",
      "name": "[parameters('applicationGatewayName')]",
      "location": "[parameters('location')]",
      "properties": {
        "copy": [
          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('httpsListenerNames'))]",
            "input": {
              "name": "[format('{0}-{1}', parameters('httpsListenerNames')[copyIndex('backendHttpSettingsCollection')], variables('appGwBackendHttpSettingsName'))]",
              "properties": {
                "port": "[parameters('backendPort')]",
                "protocol": "[parameters('backendProtocol')]",
                "cookieBasedAffinity": "[parameters('cookieBasedAffinity')]",
                "hostName": "[concat(parameters('httpsListenerNames')[copyIndex('backendHttpSettingsCollection')], variables('appGwBackendHttpSettingsHostName'))]",
                "probeEnabled": true,
                "probe": {
                  "id": "[variables('appGwProbeRef')]"
                },
                "trustedRootCertificates": [
                  {
                    "id": "[format('{0}/trustedRootCertificates/{1}', variables('appGwId'), variables('appGwTrustedRootCertName'))]"
                  }
                ]
              }
            }
          },
          {
            "name": "httpListeners",
            "count": "[length(parameters('httpsListenerNames'))]",
            "input": {
              "name": "[format('{0}-{1}', parameters('httpsListenerNames')[copyIndex('httpListeners')], variables('appGwHttpsListenerName'))]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[format('{0}/frontendIPConfigurations/{1}', variables('appGwId'), variables('appGwFrontendIPConfigName'))]"
                },
                "frontendPort": {
                  "id": "[format('{0}/frontendPorts/{1}', variables('appGwId'), variables('appGwFrontendPortName'))]"
                },
                "protocol": "[parameters('frontendProtocol')]",
                "sslCertificate": "[variables('appGwSSLCertId')]",
                "hostName": "[concat(parameters('httpsListenerNames')[copyIndex('httpListeners')], variables('appGwHttpsListenerHostName'))]"
              }
            }
          },
          {
            "name": "requestRoutingRules",
            "count": "[length(parameters('httpsListenerNames'))]",
            "input": {
              "name": "[format('{0}-{1}', parameters('httpsListenerNames')[copyIndex('requestRoutingRules')], variables('appGwHttpsRuleName'))]",
              "properties": {
                "ruleType": "Basic",
                "httpListener": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}-{1}', parameters('httpsListenerNames')[copyIndex('requestRoutingRules')], variables('appGwHttpsListenerName')))]"
                },
                "backendAddressPool": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), variables('appGwBackendPoolName'))]"
                },
                "backendHttpSettings": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('{0}-{1}', parameters('httpsListenerNames')[copyIndex('requestRoutingRules')], variables('appGwBackendHttpSettingsName')))]"
                }
              }
            }
          }
        ],
        "sku": {
          "name": "[variables('appGwSize')]",
          "tier": "[variables('appGwTier')]"
        },
        "autoscaleConfiguration": {
          "minCapacity": "[parameters('minCapacity')]"
        },
        "trustedRootCertificates": [
          {
            "name": "[variables('appGwTrustedRootCertName')]",
            "properties": {
              "data": "[parameters('rootCertData')]"
            }
          }
        ],
        "sslCertificates": [
          {
            "name": "[variables('appGwSSLCertName')]",
            "properties": {
              "data": "[parameters('certData')]",
              "password": "[parameters('certPassword')]"
            }
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "[variables('appGwIPConfigName')]",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('appGwFrontendIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('appGwPublicIPRef')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "[variables('appGwFrontendPortName')]",
            "properties": {
              "port": "[parameters('frontendPort')]"
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('appGwProbeName')]",
            "properties": {
              "protocol": "[parameters('backendProtocol')]",
              "path": "[parameters('healthProbePath')]",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "host": "[parameters('healthProbeHostName')]",
              "port": "[parameters('backendPort')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('appGwBackendPoolName')]",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[parameters('backendIpAddress')]"
                }
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGwPublicIpName_var'))]"
      ]
    }
  ]
}